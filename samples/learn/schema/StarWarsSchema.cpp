// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#include "StarWarsObjects.h"

#include "graphqlservice/introspection/Introspection.h"

#include <algorithm>
#include <array>
#include <functional>
#include <sstream>
#include <stdexcept>
#include <string_view>
#include <tuple>
#include <vector>

using namespace std::literals;

namespace graphql {
namespace service {

static const std::array<std::string_view, 3> s_namesEpisode = {
	R"gql(NEW_HOPE)gql"sv,
	R"gql(EMPIRE)gql"sv,
	R"gql(JEDI)gql"sv
};

template <>
learn::Episode ModifiedArgument<learn::Episode>::convert(const response::Value& value)
{
	if (!value.maybe_enum())
	{
		throw service::schema_exception { { R"ex(not a valid Episode value)ex" } };
	}

	const auto itr = std::find(s_namesEpisode.cbegin(), s_namesEpisode.cend(), value.get<response::StringType>());

	if (itr == s_namesEpisode.cend())
	{
		throw service::schema_exception { { R"ex(not a valid Episode value)ex" } };
	}

	return static_cast<learn::Episode>(itr - s_namesEpisode.cbegin());
}

template <>
std::future<service::ResolverResult> ModifiedResult<learn::Episode>::convert(service::FieldResult<learn::Episode>&& result, ResolverParams&& params)
{
	return resolve(std::move(result), std::move(params),
		[](learn::Episode value, const ResolverParams&)
		{
			response::Value result(response::Type::EnumValue);

			result.set<response::StringType>(response::StringType { s_namesEpisode[static_cast<size_t>(value)] });

			return result;
		});
}

template <>
learn::ReviewInput ModifiedArgument<learn::ReviewInput>::convert(const response::Value& value)
{
	auto valueStars = service::ModifiedArgument<response::IntType>::require("stars", value);
	auto valueCommentary = service::ModifiedArgument<response::StringType>::require<service::TypeModifier::Nullable>("commentary", value);

	return {
		std::move(valueStars),
		std::move(valueCommentary)
	};
}

} // namespace service

namespace learn {

Operations::Operations(std::shared_ptr<object::Query> query, std::shared_ptr<object::Mutation> mutation)
	: service::Request({
		{ "query", query },
		{ "mutation", mutation }
	}, GetSchema())
	, _query(std::move(query))
	, _mutation(std::move(mutation))
{
}

void AddTypesToSchema(const std::shared_ptr<schema::Schema>& schema)
{
	auto typeEpisode = schema::EnumType::Make(R"gql(Episode)gql"sv, R"md()md"sv);
	schema->AddType(R"gql(Episode)gql"sv, typeEpisode);
	auto typeReviewInput = schema::InputObjectType::Make(R"gql(ReviewInput)gql"sv, R"md()md"sv);
	schema->AddType(R"gql(ReviewInput)gql"sv, typeReviewInput);
	auto typeCharacter = schema::InterfaceType::Make(R"gql(Character)gql"sv, R"md()md"sv);
	schema->AddType(R"gql(Character)gql"sv, typeCharacter);
	auto typeHuman = schema::ObjectType::Make(R"gql(Human)gql"sv, R"md()md");
	schema->AddType(R"gql(Human)gql"sv, typeHuman);
	auto typeDroid = schema::ObjectType::Make(R"gql(Droid)gql"sv, R"md()md");
	schema->AddType(R"gql(Droid)gql"sv, typeDroid);
	auto typeQuery = schema::ObjectType::Make(R"gql(Query)gql"sv, R"md()md");
	schema->AddType(R"gql(Query)gql"sv, typeQuery);
	auto typeReview = schema::ObjectType::Make(R"gql(Review)gql"sv, R"md()md");
	schema->AddType(R"gql(Review)gql"sv, typeReview);
	auto typeMutation = schema::ObjectType::Make(R"gql(Mutation)gql"sv, R"md()md");
	schema->AddType(R"gql(Mutation)gql"sv, typeMutation);

	typeEpisode->AddEnumValues({
		{ service::s_namesEpisode[static_cast<size_t>(learn::Episode::NEW_HOPE)], R"md()md"sv, std::nullopt },
		{ service::s_namesEpisode[static_cast<size_t>(learn::Episode::EMPIRE)], R"md()md"sv, std::nullopt },
		{ service::s_namesEpisode[static_cast<size_t>(learn::Episode::JEDI)], R"md()md"sv, std::nullopt }
	});

	typeReviewInput->AddInputValues({
		schema::InputValue::Make(R"gql(stars)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType("Int")), R"gql()gql"sv),
		schema::InputValue::Make(R"gql(commentary)gql"sv, R"md()md"sv, schema->LookupType("String"), R"gql()gql"sv)
	});

	typeCharacter->AddFields({
		schema::Field::Make(R"gql(id)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType("String"))),
		schema::Field::Make(R"gql(name)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType("String")),
		schema::Field::Make(R"gql(friends)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::LIST, schema->LookupType("Character"))),
		schema::Field::Make(R"gql(appearsIn)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::LIST, schema->LookupType("Episode")))
	});

	AddHumanDetails(typeHuman, schema);
	AddDroidDetails(typeDroid, schema);
	AddQueryDetails(typeQuery, schema);
	AddReviewDetails(typeReview, schema);
	AddMutationDetails(typeMutation, schema);

	schema->AddQueryType(typeQuery);
	schema->AddMutationType(typeMutation);
}

std::shared_ptr<schema::Schema> GetSchema()
{
	static std::weak_ptr<schema::Schema> s_wpSchema;
	auto schema = s_wpSchema.lock();

	if (!schema)
	{
		schema = std::make_shared<schema::Schema>(false);
		introspection::AddTypesToSchema(schema);
		AddTypesToSchema(schema);
		s_wpSchema = schema;
	}

	return schema;
}

} // namespace learn
} // namespace graphql
